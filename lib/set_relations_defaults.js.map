{"version":3,"file":"set_relations_defaults.js","names":["_utils","require","_inflection","_isBoolean","_interopRequireDefault","_isString","setRelationsDefaults","model","constructor","getModel","Error","relations","forEach","relation","_isPrepared","Object","defineProperty","get","type","isHasMany","initialValue","isHasOne","isString","relatedModel","propertyName","lowercaseFirstLetter","modelName","name","pluralize","jsonKey","underscore","topLevelJsonKey","tableize","foreignKey","foreign_key","singularize","upperCaseFirstLetter","setMethodName","concat","removeMethodName","reverseRelation","isBoolean","onDestroy"],"sources":["../src/set_relations_defaults.js"],"sourcesContent":["import { upperCaseFirstLetter, lowercaseFirstLetter } from './utils';\nimport {\n  pluralize, underscore, tableize, foreign_key,\n  singularize\n} from 'inflection';\nimport isBoolean from 'lodash/isBoolean';\nimport isString from 'lodash/isString';\n\n// mutate static relations and add defaults\n// to each relation\nexport default function setRelationsDefaults(model) {\n\n  if (!model.constructor.getModel) {\n    throw new Error(\"getModel static method must be defined for a \\\n                     base model class, that returns model class given its name\")\n  }\n\n  model.constructor.relations.forEach(relation => {\n\n    if (relation._isPrepared) return;\n\n    // console.log('setRelationsDefaults', model, relation)   \n\n    // shorthand method to quickly check if relation is of hasMany type\n    Object.defineProperty(relation, \"isHasMany\", {\n      get: function() {\n        return this.type === 'hasMany'\n      }\n    });\n\n    // shorthand method to quickly check if relation is of hasOne type\n    Object.defineProperty(relation, \"isHasOne\", {\n      get: function() {\n        return this.type === 'hasOne'\n      }\n    });\n\n    // set initialValue for relation property\n    if (relation.isHasMany) {\n      relation.initialValue = [];\n    } else if (relation.isHasOne) {\n      relation.initialValue = null;\n    }\n\n    if (isString(relation.relatedModel)) {\n      relation.relatedModel = model.constructor.getModel(relation.relatedModel);\n    }\n\n    // property name on model instance to relation(s)\n    if (!relation.propertyName) {\n      relation.propertyName = lowercaseFirstLetter(relation.relatedModel.modelName || relation.relatedModel.name);\n\n      if (relation.isHasMany) {\n        relation.propertyName = pluralize(relation.propertyName)\n      }\n    }\n\n    // json key for embedded json\n    if (!relation.jsonKey) {\n      relation.jsonKey = underscore(relation.propertyName);\n    }\n\n    // key in top level json\n    if (!relation.topLevelJsonKey) {\n      relation.topLevelJsonKey = tableize(relation.propertyName);\n    }\n\n    // foreign key with ids of relations\n    if (!relation.foreignKey) {\n      if (relation.isHasMany) {\n        relation.foreignKey = foreign_key(singularize(relation.propertyName)) + 's';\n      } else if (relation.isHasOne) {\n        relation.foreignKey = foreign_key(relation.propertyName);\n      }\n    }\n\n    let name = upperCaseFirstLetter(relation.propertyName);\n    if (relation.isHasMany) name = singularize(name);\n\n    // method name to add single relation, will be used as alias\n    if (!relation.setMethodName) {      \n      relation.setMethodName = `set${name}`;\n    }\n\n    // method name to remove single relation, will be used as alias\n    if (!relation.removeMethodName) {\n      relation.removeMethodName = `remove${name}`;\n    }\n\n    let reverseRelation = relation.reverseRelation;\n\n    if (reverseRelation) {      \n\n      if (isBoolean(reverseRelation)) {\n        reverseRelation = relation.reverseRelation = {};\n      }\n\n      if (!reverseRelation.onDestroy && reverseRelation.onDestroy !== false) {\n        reverseRelation.onDestroy = 'removeSelf'\n      }\n\n      if (!reverseRelation.propertyName) {\n        reverseRelation.propertyName = lowercaseFirstLetter(model.constructor.modelName || model.constructor.name);\n      }\n\n      let name = upperCaseFirstLetter(reverseRelation.propertyName);\n\n      if (!reverseRelation.setMethodName) {        \n        reverseRelation.setMethodName = `set${name}`;\n      }\n\n      if (!reverseRelation.removeMethodName) {        \n        reverseRelation.removeMethodName = `remove${name}`;\n      }\n\n      //console.log('setRelationsDefaults reverseRelation is true', relation.reverseRelation, relation)\n\n    }\n\n    relation._isPrepared = true;\n\n  });\n\n}"],"mappings":"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"}